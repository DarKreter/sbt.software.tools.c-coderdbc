#include "CanParser_autogenerated.hpp"


/**
 * !!!WARNING!!!
 * This file is autogenerated, any changes will not be retained after next
 * generation.
 *
 * @brief In this file are Pack and Unpack function definitions.
 */

namespace SBT::System::Comm{

#ifdef CANPARSER_USE_DIAG_MONITORS
// Function prototypes to be called each time CAN frame is unpacked
// FMon function may detect RC, CRC or DLC violation
#include "canparser-fmon.h"

#endif // CANPARSER_USE_DIAG_MONITORS


LIFEPO4_CELLS_1_t Unpack_LIFEPO4_CELLS_1(const uint8_t* _d)
{ 
LIFEPO4_CELLS_1_t _m;
  _m.cellVoltage1 = ((_d[1] & (0x0FU)) << 8) | (_d[0] & (0xFFU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltage1_phys = (sigfloat_t)(CANPARSER_cellVoltage1_fromS(_m->cellVoltage1));
#endif // CANPARSER_USE_SIGFLOAT

  _m.cellVoltage2 = ((_d[2] & (0xFFU)) << 4) | ((_d[1] >> 4) & (0x0FU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltage2_phys = (sigfloat_t)(CANPARSER_cellVoltage2_fromS(_m->cellVoltage2));
#endif // CANPARSER_USE_SIGFLOAT

  _m.cellVoltage3 = ((_d[4] & (0x0FU)) << 8) | (_d[3] & (0xFFU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltage3_phys = (sigfloat_t)(CANPARSER_cellVoltage3_fromS(_m->cellVoltage3));
#endif // CANPARSER_USE_SIGFLOAT

  _m.cellVoltage4 = ((_d[5] & (0xFFU)) << 4) | ((_d[4] >> 4) & (0x0FU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltage4_phys = (sigfloat_t)(CANPARSER_cellVoltage4_fromS(_m->cellVoltage4));
#endif // CANPARSER_USE_SIGFLOAT

  _m.cellVoltage5 = ((_d[7] & (0x0FU)) << 8) | (_d[6] & (0xFFU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltage5_phys = (sigfloat_t)(CANPARSER_cellVoltage5_fromS(_m->cellVoltage5));
#endif // CANPARSER_USE_SIGFLOAT

#ifdef CANPARSER_USE_DIAG_MONITORS
  _m.mon1.dlc_error = (dlc_ < LIFEPO4_CELLS_1_DLC);
  _m.mon1.last_cycle = GetSystemTick();
  _m.mon1.frame_cnt++;

  FMon_LIFEPO4_CELLS_1_canparser(&_m.mon1, LIFEPO4_CELLS_1_CANID);
#endif // CANPARSER_USE_DIAG_MONITORS

  return _m;
}

#ifdef CANPARSER_USE_CANSTRUCT

uint32_t Pack_LIFEPO4_CELLS_1(LIFEPO4_CELLS_1_t* _m, __CoderDbcCanFrame_t__* cframe)
{
  uint8_t i; for (i = 0; (i < LIFEPO4_CELLS_1_DLC) && (i < 8); cframe->Data[i++] = 0);

#ifdef CANPARSER_USE_SIGFLOAT
  _m->cellVoltage1 = CANPARSER_cellVoltage1_toS(_m->cellVoltage1_phys);
  _m->cellVoltage2 = CANPARSER_cellVoltage2_toS(_m->cellVoltage2_phys);
  _m->cellVoltage3 = CANPARSER_cellVoltage3_toS(_m->cellVoltage3_phys);
  _m->cellVoltage4 = CANPARSER_cellVoltage4_toS(_m->cellVoltage4_phys);
  _m->cellVoltage5 = CANPARSER_cellVoltage5_toS(_m->cellVoltage5_phys);
#endif // CANPARSER_USE_SIGFLOAT

  cframe->Data[0] |= (_m->cellVoltage1 & (0xFFU));
  cframe->Data[1] |= ((_m->cellVoltage1 >> 8) & (0x0FU)) | ((_m->cellVoltage2 & (0x0FU)) << 4);
  cframe->Data[2] |= ((_m->cellVoltage2 >> 4) & (0xFFU));
  cframe->Data[3] |= (_m->cellVoltage3 & (0xFFU));
  cframe->Data[4] |= ((_m->cellVoltage3 >> 8) & (0x0FU)) | ((_m->cellVoltage4 & (0x0FU)) << 4);
  cframe->Data[5] |= ((_m->cellVoltage4 >> 4) & (0xFFU));
  cframe->Data[6] |= (_m->cellVoltage5 & (0xFFU));
  cframe->Data[7] |= ((_m->cellVoltage5 >> 8) & (0x0FU));

  cframe->MsgId = LIFEPO4_CELLS_1_CANID;
  cframe->DLC = LIFEPO4_CELLS_1_DLC;
  cframe->IDE = LIFEPO4_CELLS_1_IDE;
  return LIFEPO4_CELLS_1_CANID;
}

#else

void Pack_LIFEPO4_CELLS_1(LIFEPO4_CELLS_1_t* _m, uint8_t* _d)
{
  uint8_t i; for (i = 0; (i < LIFEPO4_CELLS_1_DLC) && (i < 8); _d[i++] = 0);

#ifdef CANPARSER_USE_SIGFLOAT
  _m->cellVoltage1 = CANPARSER_cellVoltage1_toS(_m->cellVoltage1_phys);
  _m->cellVoltage2 = CANPARSER_cellVoltage2_toS(_m->cellVoltage2_phys);
  _m->cellVoltage3 = CANPARSER_cellVoltage3_toS(_m->cellVoltage3_phys);
  _m->cellVoltage4 = CANPARSER_cellVoltage4_toS(_m->cellVoltage4_phys);
  _m->cellVoltage5 = CANPARSER_cellVoltage5_toS(_m->cellVoltage5_phys);
#endif // CANPARSER_USE_SIGFLOAT

  _d[0] |= (_m->cellVoltage1 & (0xFFU));
  _d[1] |= ((_m->cellVoltage1 >> 8) & (0x0FU)) | ((_m->cellVoltage2 & (0x0FU)) << 4);
  _d[2] |= ((_m->cellVoltage2 >> 4) & (0xFFU));
  _d[3] |= (_m->cellVoltage3 & (0xFFU));
  _d[4] |= ((_m->cellVoltage3 >> 8) & (0x0FU)) | ((_m->cellVoltage4 & (0x0FU)) << 4);
  _d[5] |= ((_m->cellVoltage4 >> 4) & (0xFFU));
  _d[6] |= (_m->cellVoltage5 & (0xFFU));
  _d[7] |= ((_m->cellVoltage5 >> 8) & (0x0FU));

}

#endif // CANPARSER_USE_CANSTRUCT

LIFEPO4_CELLS_2_t Unpack_LIFEPO4_CELLS_2(const uint8_t* _d)
{ 
LIFEPO4_CELLS_2_t _m;
  _m.cellVoltage6 = ((_d[1] & (0x0FU)) << 8) | (_d[0] & (0xFFU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltage6_phys = (sigfloat_t)(CANPARSER_cellVoltage6_fromS(_m->cellVoltage6));
#endif // CANPARSER_USE_SIGFLOAT

  _m.cellVoltage7 = ((_d[2] & (0xFFU)) << 4) | ((_d[1] >> 4) & (0x0FU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltage7_phys = (sigfloat_t)(CANPARSER_cellVoltage7_fromS(_m->cellVoltage7));
#endif // CANPARSER_USE_SIGFLOAT

  _m.cellVoltage8 = ((_d[4] & (0x0FU)) << 8) | (_d[3] & (0xFFU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltage8_phys = (sigfloat_t)(CANPARSER_cellVoltage8_fromS(_m->cellVoltage8));
#endif // CANPARSER_USE_SIGFLOAT

  _m.cellVoltage9 = ((_d[5] & (0xFFU)) << 4) | ((_d[4] >> 4) & (0x0FU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltage9_phys = (sigfloat_t)(CANPARSER_cellVoltage9_fromS(_m->cellVoltage9));
#endif // CANPARSER_USE_SIGFLOAT

  _m.cellVoltageA = ((_d[7] & (0x0FU)) << 8) | (_d[6] & (0xFFU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltageA_phys = (sigfloat_t)(CANPARSER_cellVoltageA_fromS(_m->cellVoltageA));
#endif // CANPARSER_USE_SIGFLOAT

#ifdef CANPARSER_USE_DIAG_MONITORS
  _m.mon1.dlc_error = (dlc_ < LIFEPO4_CELLS_2_DLC);
  _m.mon1.last_cycle = GetSystemTick();
  _m.mon1.frame_cnt++;

  FMon_LIFEPO4_CELLS_2_canparser(&_m.mon1, LIFEPO4_CELLS_2_CANID);
#endif // CANPARSER_USE_DIAG_MONITORS

  return _m;
}

#ifdef CANPARSER_USE_CANSTRUCT

uint32_t Pack_LIFEPO4_CELLS_2(LIFEPO4_CELLS_2_t* _m, __CoderDbcCanFrame_t__* cframe)
{
  uint8_t i; for (i = 0; (i < LIFEPO4_CELLS_2_DLC) && (i < 8); cframe->Data[i++] = 0);

#ifdef CANPARSER_USE_SIGFLOAT
  _m->cellVoltage6 = CANPARSER_cellVoltage6_toS(_m->cellVoltage6_phys);
  _m->cellVoltage7 = CANPARSER_cellVoltage7_toS(_m->cellVoltage7_phys);
  _m->cellVoltage8 = CANPARSER_cellVoltage8_toS(_m->cellVoltage8_phys);
  _m->cellVoltage9 = CANPARSER_cellVoltage9_toS(_m->cellVoltage9_phys);
  _m->cellVoltageA = CANPARSER_cellVoltageA_toS(_m->cellVoltageA_phys);
#endif // CANPARSER_USE_SIGFLOAT

  cframe->Data[0] |= (_m->cellVoltage6 & (0xFFU));
  cframe->Data[1] |= ((_m->cellVoltage6 >> 8) & (0x0FU)) | ((_m->cellVoltage7 & (0x0FU)) << 4);
  cframe->Data[2] |= ((_m->cellVoltage7 >> 4) & (0xFFU));
  cframe->Data[3] |= (_m->cellVoltage8 & (0xFFU));
  cframe->Data[4] |= ((_m->cellVoltage8 >> 8) & (0x0FU)) | ((_m->cellVoltage9 & (0x0FU)) << 4);
  cframe->Data[5] |= ((_m->cellVoltage9 >> 4) & (0xFFU));
  cframe->Data[6] |= (_m->cellVoltageA & (0xFFU));
  cframe->Data[7] |= ((_m->cellVoltageA >> 8) & (0x0FU));

  cframe->MsgId = LIFEPO4_CELLS_2_CANID;
  cframe->DLC = LIFEPO4_CELLS_2_DLC;
  cframe->IDE = LIFEPO4_CELLS_2_IDE;
  return LIFEPO4_CELLS_2_CANID;
}

#else

void Pack_LIFEPO4_CELLS_2(LIFEPO4_CELLS_2_t* _m, uint8_t* _d)
{
  uint8_t i; for (i = 0; (i < LIFEPO4_CELLS_2_DLC) && (i < 8); _d[i++] = 0);

#ifdef CANPARSER_USE_SIGFLOAT
  _m->cellVoltage6 = CANPARSER_cellVoltage6_toS(_m->cellVoltage6_phys);
  _m->cellVoltage7 = CANPARSER_cellVoltage7_toS(_m->cellVoltage7_phys);
  _m->cellVoltage8 = CANPARSER_cellVoltage8_toS(_m->cellVoltage8_phys);
  _m->cellVoltage9 = CANPARSER_cellVoltage9_toS(_m->cellVoltage9_phys);
  _m->cellVoltageA = CANPARSER_cellVoltageA_toS(_m->cellVoltageA_phys);
#endif // CANPARSER_USE_SIGFLOAT

  _d[0] |= (_m->cellVoltage6 & (0xFFU));
  _d[1] |= ((_m->cellVoltage6 >> 8) & (0x0FU)) | ((_m->cellVoltage7 & (0x0FU)) << 4);
  _d[2] |= ((_m->cellVoltage7 >> 4) & (0xFFU));
  _d[3] |= (_m->cellVoltage8 & (0xFFU));
  _d[4] |= ((_m->cellVoltage8 >> 8) & (0x0FU)) | ((_m->cellVoltage9 & (0x0FU)) << 4);
  _d[5] |= ((_m->cellVoltage9 >> 4) & (0xFFU));
  _d[6] |= (_m->cellVoltageA & (0xFFU));
  _d[7] |= ((_m->cellVoltageA >> 8) & (0x0FU));

}

#endif // CANPARSER_USE_CANSTRUCT

LIFEPO4_CELLS_3_t Unpack_LIFEPO4_CELLS_3(const uint8_t* _d)
{ 
LIFEPO4_CELLS_3_t _m;
  _m.cellVoltageB = ((_d[1] & (0x0FU)) << 8) | (_d[0] & (0xFFU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltageB_phys = (sigfloat_t)(CANPARSER_cellVoltageB_fromS(_m->cellVoltageB));
#endif // CANPARSER_USE_SIGFLOAT

  _m.cellVoltageC = ((_d[2] & (0xFFU)) << 4) | ((_d[1] >> 4) & (0x0FU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltageC_phys = (sigfloat_t)(CANPARSER_cellVoltageC_fromS(_m->cellVoltageC));
#endif // CANPARSER_USE_SIGFLOAT

  _m.cellVoltageD = ((_d[4] & (0x0FU)) << 8) | (_d[3] & (0xFFU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltageD_phys = (sigfloat_t)(CANPARSER_cellVoltageD_fromS(_m->cellVoltageD));
#endif // CANPARSER_USE_SIGFLOAT

  _m.cellVoltageE = ((_d[5] & (0xFFU)) << 4) | ((_d[4] >> 4) & (0x0FU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.cellVoltageE_phys = (sigfloat_t)(CANPARSER_cellVoltageE_fromS(_m->cellVoltageE));
#endif // CANPARSER_USE_SIGFLOAT

#ifdef CANPARSER_USE_DIAG_MONITORS
  _m.mon1.dlc_error = (dlc_ < LIFEPO4_CELLS_3_DLC);
  _m.mon1.last_cycle = GetSystemTick();
  _m.mon1.frame_cnt++;

  FMon_LIFEPO4_CELLS_3_canparser(&_m.mon1, LIFEPO4_CELLS_3_CANID);
#endif // CANPARSER_USE_DIAG_MONITORS

  return _m;
}

#ifdef CANPARSER_USE_CANSTRUCT

uint32_t Pack_LIFEPO4_CELLS_3(LIFEPO4_CELLS_3_t* _m, __CoderDbcCanFrame_t__* cframe)
{
  uint8_t i; for (i = 0; (i < LIFEPO4_CELLS_3_DLC) && (i < 8); cframe->Data[i++] = 0);

#ifdef CANPARSER_USE_SIGFLOAT
  _m->cellVoltageB = CANPARSER_cellVoltageB_toS(_m->cellVoltageB_phys);
  _m->cellVoltageC = CANPARSER_cellVoltageC_toS(_m->cellVoltageC_phys);
  _m->cellVoltageD = CANPARSER_cellVoltageD_toS(_m->cellVoltageD_phys);
  _m->cellVoltageE = CANPARSER_cellVoltageE_toS(_m->cellVoltageE_phys);
#endif // CANPARSER_USE_SIGFLOAT

  cframe->Data[0] |= (_m->cellVoltageB & (0xFFU));
  cframe->Data[1] |= ((_m->cellVoltageB >> 8) & (0x0FU)) | ((_m->cellVoltageC & (0x0FU)) << 4);
  cframe->Data[2] |= ((_m->cellVoltageC >> 4) & (0xFFU));
  cframe->Data[3] |= (_m->cellVoltageD & (0xFFU));
  cframe->Data[4] |= ((_m->cellVoltageD >> 8) & (0x0FU)) | ((_m->cellVoltageE & (0x0FU)) << 4);
  cframe->Data[5] |= ((_m->cellVoltageE >> 4) & (0xFFU));

  cframe->MsgId = LIFEPO4_CELLS_3_CANID;
  cframe->DLC = LIFEPO4_CELLS_3_DLC;
  cframe->IDE = LIFEPO4_CELLS_3_IDE;
  return LIFEPO4_CELLS_3_CANID;
}

#else

void Pack_LIFEPO4_CELLS_3(LIFEPO4_CELLS_3_t* _m, uint8_t* _d)
{
  uint8_t i; for (i = 0; (i < LIFEPO4_CELLS_3_DLC) && (i < 8); _d[i++] = 0);

#ifdef CANPARSER_USE_SIGFLOAT
  _m->cellVoltageB = CANPARSER_cellVoltageB_toS(_m->cellVoltageB_phys);
  _m->cellVoltageC = CANPARSER_cellVoltageC_toS(_m->cellVoltageC_phys);
  _m->cellVoltageD = CANPARSER_cellVoltageD_toS(_m->cellVoltageD_phys);
  _m->cellVoltageE = CANPARSER_cellVoltageE_toS(_m->cellVoltageE_phys);
#endif // CANPARSER_USE_SIGFLOAT

  _d[0] |= (_m->cellVoltageB & (0xFFU));
  _d[1] |= ((_m->cellVoltageB >> 8) & (0x0FU)) | ((_m->cellVoltageC & (0x0FU)) << 4);
  _d[2] |= ((_m->cellVoltageC >> 4) & (0xFFU));
  _d[3] |= (_m->cellVoltageD & (0xFFU));
  _d[4] |= ((_m->cellVoltageD >> 8) & (0x0FU)) | ((_m->cellVoltageE & (0x0FU)) << 4);
  _d[5] |= ((_m->cellVoltageE >> 4) & (0xFFU));

}

#endif // CANPARSER_USE_CANSTRUCT

LIFEPO4_GENERAL_t Unpack_LIFEPO4_GENERAL(const uint8_t* _d)
{ 
LIFEPO4_GENERAL_t _m;
  _m.voltage = ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.voltage_phys = (sigfloat_t)(CANPARSER_voltage_fromS(_m->voltage));
#endif // CANPARSER_USE_SIGFLOAT

  _m.currentCharge = ((_d[3] & (0x0FU)) << 8) | (_d[2] & (0xFFU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.currentCharge_phys = (sigfloat_t)(CANPARSER_currentCharge_fromS(_m->currentCharge));
#endif // CANPARSER_USE_SIGFLOAT

  _m.currentDischarge = ((_d[4] & (0xFFU)) << 4) | ((_d[3] >> 4) & (0x0FU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.currentDischarge_phys = (sigfloat_t)(CANPARSER_currentDischarge_fromS(_m->currentDischarge));
#endif // CANPARSER_USE_SIGFLOAT

  _m.temperature = (_d[5] & (0xFFU));
  _m.capacity = (_d[6] & (0xFFU));

#ifdef CANPARSER_USE_DIAG_MONITORS
  _m.mon1.dlc_error = (dlc_ < LIFEPO4_GENERAL_DLC);
  _m.mon1.last_cycle = GetSystemTick();
  _m.mon1.frame_cnt++;

  FMon_LIFEPO4_GENERAL_canparser(&_m.mon1, LIFEPO4_GENERAL_CANID);
#endif // CANPARSER_USE_DIAG_MONITORS

  return _m;
}

#ifdef CANPARSER_USE_CANSTRUCT

uint32_t Pack_LIFEPO4_GENERAL(LIFEPO4_GENERAL_t* _m, __CoderDbcCanFrame_t__* cframe)
{
  uint8_t i; for (i = 0; (i < LIFEPO4_GENERAL_DLC) && (i < 8); cframe->Data[i++] = 0);

#ifdef CANPARSER_USE_SIGFLOAT
  _m->voltage = CANPARSER_voltage_toS(_m->voltage_phys);
  _m->currentCharge = CANPARSER_currentCharge_toS(_m->currentCharge_phys);
  _m->currentDischarge = CANPARSER_currentDischarge_toS(_m->currentDischarge_phys);
#endif // CANPARSER_USE_SIGFLOAT

  cframe->Data[0] |= (_m->voltage & (0xFFU));
  cframe->Data[1] |= ((_m->voltage >> 8) & (0xFFU));
  cframe->Data[2] |= (_m->currentCharge & (0xFFU));
  cframe->Data[3] |= ((_m->currentCharge >> 8) & (0x0FU)) | ((_m->currentDischarge & (0x0FU)) << 4);
  cframe->Data[4] |= ((_m->currentDischarge >> 4) & (0xFFU));
  cframe->Data[5] |= (_m->temperature & (0xFFU));
  cframe->Data[6] |= (_m->capacity & (0xFFU));

  cframe->MsgId = LIFEPO4_GENERAL_CANID;
  cframe->DLC = LIFEPO4_GENERAL_DLC;
  cframe->IDE = LIFEPO4_GENERAL_IDE;
  return LIFEPO4_GENERAL_CANID;
}

#else

void Pack_LIFEPO4_GENERAL(LIFEPO4_GENERAL_t* _m, uint8_t* _d)
{
  uint8_t i; for (i = 0; (i < LIFEPO4_GENERAL_DLC) && (i < 8); _d[i++] = 0);

#ifdef CANPARSER_USE_SIGFLOAT
  _m->voltage = CANPARSER_voltage_toS(_m->voltage_phys);
  _m->currentCharge = CANPARSER_currentCharge_toS(_m->currentCharge_phys);
  _m->currentDischarge = CANPARSER_currentDischarge_toS(_m->currentDischarge_phys);
#endif // CANPARSER_USE_SIGFLOAT

  _d[0] |= (_m->voltage & (0xFFU));
  _d[1] |= ((_m->voltage >> 8) & (0xFFU));
  _d[2] |= (_m->currentCharge & (0xFFU));
  _d[3] |= ((_m->currentCharge >> 8) & (0x0FU)) | ((_m->currentDischarge & (0x0FU)) << 4);
  _d[4] |= ((_m->currentDischarge >> 4) & (0xFFU));
  _d[5] |= (_m->temperature & (0xFFU));
  _d[6] |= (_m->capacity & (0xFFU));

}

#endif // CANPARSER_USE_CANSTRUCT

MPPT_GENERAL_t Unpack_MPPT_GENERAL(const uint8_t* _d)
{ 
MPPT_GENERAL_t _m;
  _m.panelVoltage = ((_d[2] & (0x03U)) << 16) | ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.panelVoltage_phys = (sigfloat_t)(CANPARSER_panelVoltage_fromS(_m->panelVoltage));
#endif // CANPARSER_USE_SIGFLOAT

  _m.panelCurrent = ((_d[3] & (0x3FU)) << 6) | ((_d[2] >> 2) & (0x3FU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.panelCurrent_phys = (sigfloat_t)(CANPARSER_panelCurrent_fromS(_m->panelCurrent));
#endif // CANPARSER_USE_SIGFLOAT

  _m.chargerCurrent = ((_d[5] & (0x03U)) << 10) | ((_d[4] & (0xFFU)) << 2) | ((_d[3] >> 6) & (0x03U));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.chargerCurrent_phys = (sigfloat_t)(CANPARSER_chargerCurrent_fromS(_m->chargerCurrent));
#endif // CANPARSER_USE_SIGFLOAT

  _m.panelPower = ((_d[7] & (0x03U)) << 14) | ((_d[6] & (0xFFU)) << 6) | ((_d[5] >> 2) & (0x3FU));
#ifdef CANPARSER_USE_SIGFLOAT
  _m.panelPower_phys = (sigfloat_t)(CANPARSER_panelPower_fromS(_m->panelPower));
#endif // CANPARSER_USE_SIGFLOAT

#ifdef CANPARSER_USE_DIAG_MONITORS
  _m.mon1.dlc_error = (dlc_ < MPPT_GENERAL_DLC);
  _m.mon1.last_cycle = GetSystemTick();
  _m.mon1.frame_cnt++;

  FMon_MPPT_GENERAL_canparser(&_m.mon1, MPPT_GENERAL_CANID);
#endif // CANPARSER_USE_DIAG_MONITORS

  return _m;
}

#ifdef CANPARSER_USE_CANSTRUCT

uint32_t Pack_MPPT_GENERAL(MPPT_GENERAL_t* _m, __CoderDbcCanFrame_t__* cframe)
{
  uint8_t i; for (i = 0; (i < MPPT_GENERAL_DLC) && (i < 8); cframe->Data[i++] = 0);

#ifdef CANPARSER_USE_SIGFLOAT
  _m->panelVoltage = CANPARSER_panelVoltage_toS(_m->panelVoltage_phys);
  _m->panelCurrent = CANPARSER_panelCurrent_toS(_m->panelCurrent_phys);
  _m->chargerCurrent = CANPARSER_chargerCurrent_toS(_m->chargerCurrent_phys);
  _m->panelPower = CANPARSER_panelPower_toS(_m->panelPower_phys);
#endif // CANPARSER_USE_SIGFLOAT

  cframe->Data[0] |= (_m->panelVoltage & (0xFFU));
  cframe->Data[1] |= ((_m->panelVoltage >> 8) & (0xFFU));
  cframe->Data[2] |= ((_m->panelVoltage >> 16) & (0x03U)) | ((_m->panelCurrent & (0x3FU)) << 2);
  cframe->Data[3] |= ((_m->panelCurrent >> 6) & (0x3FU)) | ((_m->chargerCurrent & (0x03U)) << 6);
  cframe->Data[4] |= ((_m->chargerCurrent >> 2) & (0xFFU));
  cframe->Data[5] |= ((_m->chargerCurrent >> 10) & (0x03U)) | ((_m->panelPower & (0x3FU)) << 2);
  cframe->Data[6] |= ((_m->panelPower >> 6) & (0xFFU));
  cframe->Data[7] |= ((_m->panelPower >> 14) & (0x03U));

  cframe->MsgId = MPPT_GENERAL_CANID;
  cframe->DLC = MPPT_GENERAL_DLC;
  cframe->IDE = MPPT_GENERAL_IDE;
  return MPPT_GENERAL_CANID;
}

#else

void Pack_MPPT_GENERAL(MPPT_GENERAL_t* _m, uint8_t* _d)
{
  uint8_t i; for (i = 0; (i < MPPT_GENERAL_DLC) && (i < 8); _d[i++] = 0);

#ifdef CANPARSER_USE_SIGFLOAT
  _m->panelVoltage = CANPARSER_panelVoltage_toS(_m->panelVoltage_phys);
  _m->panelCurrent = CANPARSER_panelCurrent_toS(_m->panelCurrent_phys);
  _m->chargerCurrent = CANPARSER_chargerCurrent_toS(_m->chargerCurrent_phys);
  _m->panelPower = CANPARSER_panelPower_toS(_m->panelPower_phys);
#endif // CANPARSER_USE_SIGFLOAT

  _d[0] |= (_m->panelVoltage & (0xFFU));
  _d[1] |= ((_m->panelVoltage >> 8) & (0xFFU));
  _d[2] |= ((_m->panelVoltage >> 16) & (0x03U)) | ((_m->panelCurrent & (0x3FU)) << 2);
  _d[3] |= ((_m->panelCurrent >> 6) & (0x3FU)) | ((_m->chargerCurrent & (0x03U)) << 6);
  _d[4] |= ((_m->chargerCurrent >> 2) & (0xFFU));
  _d[5] |= ((_m->chargerCurrent >> 10) & (0x03U)) | ((_m->panelPower & (0x3FU)) << 2);
  _d[6] |= ((_m->panelPower >> 6) & (0xFFU));
  _d[7] |= ((_m->panelPower >> 14) & (0x03U));

}

#endif // CANPARSER_USE_CANSTRUCT

HEARTBEAT_t Unpack_HEARTBEAT(const uint8_t* _d)
{ 
HEARTBEAT_t _m;
  _m.heartbeat = ((_d[3] & (0xFFU)) << 24) | ((_d[2] & (0xFFU)) << 16) | ((_d[1] & (0xFFU)) << 8) | (_d[0] & (0xFFU));

#ifdef CANPARSER_USE_DIAG_MONITORS
  _m.mon1.dlc_error = (dlc_ < HEARTBEAT_DLC);
  _m.mon1.last_cycle = GetSystemTick();
  _m.mon1.frame_cnt++;

  FMon_HEARTBEAT_canparser(&_m.mon1, HEARTBEAT_CANID);
#endif // CANPARSER_USE_DIAG_MONITORS

  return _m;
}

#ifdef CANPARSER_USE_CANSTRUCT

uint32_t Pack_HEARTBEAT(HEARTBEAT_t* _m, __CoderDbcCanFrame_t__* cframe)
{
  uint8_t i; for (i = 0; (i < HEARTBEAT_DLC) && (i < 8); cframe->Data[i++] = 0);

  cframe->Data[0] |= (_m->heartbeat & (0xFFU));
  cframe->Data[1] |= ((_m->heartbeat >> 8) & (0xFFU));
  cframe->Data[2] |= ((_m->heartbeat >> 16) & (0xFFU));
  cframe->Data[3] |= ((_m->heartbeat >> 24) & (0xFFU));

  cframe->MsgId = HEARTBEAT_CANID;
  cframe->DLC = HEARTBEAT_DLC;
  cframe->IDE = HEARTBEAT_IDE;
  return HEARTBEAT_CANID;
}

#else

void Pack_HEARTBEAT(HEARTBEAT_t* _m, uint8_t* _d)
{
  uint8_t i; for (i = 0; (i < HEARTBEAT_DLC) && (i < 8); _d[i++] = 0);

  _d[0] |= (_m->heartbeat & (0xFFU));
  _d[1] |= ((_m->heartbeat >> 8) & (0xFFU));
  _d[2] |= ((_m->heartbeat >> 16) & (0xFFU));
  _d[3] |= ((_m->heartbeat >> 24) & (0xFFU));

}

#endif // CANPARSER_USE_CANSTRUCT

} //SBT::System::Comm
